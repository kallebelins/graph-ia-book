from typing import List


def mat_sub(I: List[List[float]], Q: List[List[float]]) -> List[List[float]]:
    n = len(Q)
    return [[I[i][j] - Q[i][j] for j in range(n)] for i in range(n)]


def mat_inv_3x3(M: List[List[float]]) -> List[List[float]]:
    a, b, c = M[0]
    d, e, f = M[1]
    g, h, i = M[2]
    det = (
        a * (e * i - f * h)
        - b * (d * i - f * g)
        + c * (d * h - e * g)
    )
    if abs(det) < 1e-12:
        raise ValueError("Singular matrix")
    adj = [
        [e * i - f * h, -(b * i - c * h), b * f - c * e],
        [-(d * i - f * g), a * i - c * g, -(a * f - c * d)],
        [d * h - e * g, -(a * h - b * g), a * e - b * d],
    ]
    inv = [[adj[r][c] / det for c in range(3)] for r in range(3)]
    return inv


def mat_vec(M: List[List[float]], v: List[float]) -> List[float]:
    return [sum(M[i][j] * v[j] for j in range(len(v))) for i in range(len(M))]


def mat_mul(A: List[List[float]], B: List[List[float]]) -> List[List[float]]:
    n, m, p = len(A), len(A[0]), len(B[0])
    out = [[0.0] * p for _ in range(n)]
    for i in range(n):
        for k in range(m):
            for j in range(p):
                out[i][j] += A[i][k] * B[k][j]
    return out


def markov_absorbing_metrics(Q: List[List[float]], R: List[List[float]]):
    n = len(Q)
    I = [[1.0 if i == j else 0.0 for j in range(n)] for i in range(n)]
    M = mat_sub(I, Q)
    if n == 3:
        N = mat_inv_3x3(M)
    else:
        raise NotImplementedError("Only 3x3 demo supported without numpy")
    ones = [1.0] * n
    t = mat_vec(N, ones)
    B = mat_mul(N, R)
    return N, t, B


def main():
    # Example compatible with Cap. 21
    Q = [
        [0.0, 0.6, 0.4],
        [0.0, 0.0, 0.1],
        [0.0, 0.2, 0.0],
    ]
    R = [[0.0], [0.9], [0.8]]
    N, t, B = markov_absorbing_metrics(Q, R)
    print("N=")
    for row in N:
        print([round(x, 4) for x in row])
    print("t=", [round(x, 4) for x in t])
    print("B=")
    for row in B:
        print([round(x, 4) for x in row])


if __name__ == "__main__":
    main()


